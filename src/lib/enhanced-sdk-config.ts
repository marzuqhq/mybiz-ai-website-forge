import { UniversalSDKConfig } from './UniversalSDK';

export const enhancedSDKConfig: Partial<UniversalSDKConfig> = {
  schemas: {
    // Enhanced existing schemas
    blog_posts: {
      required: ['title', 'content', 'author'],
      types: {
        title: 'string',
        content: 'string',
        excerpt: 'string',
        slug: 'string',
        author: 'string',
        status: 'string',
        featured: 'boolean',
        featuredImage: 'string',
        tags: 'array',
        categories: 'array',
        seoTitle: 'string',
        seoDescription: 'string',
        publishedAt: 'date',
        readTime: 'number',
        views: 'number',
        likes: 'number',
        comments: 'array',
        relatedPosts: 'array',
      },
      defaults: {
        status: 'draft',
        featured: false,
        tags: [],
        categories: [],
        publishedAt: new Date().toISOString(),
        readTime: 5,
        views: 0,
        likes: 0,
        comments: [],
        relatedPosts: [],
      },
    },
    
    contacts: {
      required: ['name', 'email', 'message'],
      types: {
        name: 'string',
        email: 'string',
        phone: 'string',
        company: 'string',
        message: 'string',
        subject: 'string',
        status: 'string',
        priority: 'string',
        assignedTo: 'string',
        tags: 'array',
        source: 'string',
        ipAddress: 'string',
        userAgent: 'string',
        referrer: 'string',
        followUpDate: 'date',
        notes: 'array',
        attachments: 'array',
      },
      defaults: {
        status: 'new',
        priority: 'medium',
        tags: [],
        source: 'website',
        notes: [],
        attachments: [],
      },
    },

    // Enhanced Ecommerce Features
    ecommerce_orders: {
      required: ['websiteId', 'orderNumber', 'customerEmail'],
      types: {
        websiteId: 'string',
        orderNumber: 'string',
        customerId: 'string',
        customerEmail: 'string',
        customerInfo: 'object',
        items: 'array',
        subtotal: 'number',
        shipping: 'number',
        tax: 'number',
        discount: 'number',
        total: 'number',
        currency: 'string',
        status: 'string',
        paymentStatus: 'string',
        paymentMethod: 'string',
        shippingAddress: 'object',
        billingAddress: 'object',
        shippingMethod: 'string',
        trackingNumber: 'string',
        fulfillmentStatus: 'string',
        notes: 'string',
        createdAt: 'date',
        updatedAt: 'date',
        estimatedDelivery: 'date',
        tags: 'array',
      },
      defaults: {
        subtotal: 0,
        shipping: 0,
        tax: 0,
        discount: 0,
        total: 0,
        currency: 'USD',
        status: 'pending',
        paymentStatus: 'pending',
        fulfillmentStatus: 'unfulfilled',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        tags: [],
      },
    },

    ecommerce_customers: {
      required: ['websiteId', 'email'],
      types: {
        websiteId: 'string',
        email: 'string',
        firstName: 'string',
        lastName: 'string',
        phone: 'string',
        dateOfBirth: 'date',
        addresses: 'array',
        orders: 'array',
        totalSpent: 'number',
        orderCount: 'number',
        averageOrderValue: 'number',
        lastOrderDate: 'date',
        tags: 'array',
        notes: 'string',
        marketingOptIn: 'boolean',
        loyaltyPoints: 'number',
        tier: 'string',
        source: 'string',
        createdAt: 'date',
        updatedAt: 'date',
      },
      defaults: {
        addresses: [],
        orders: [],
        totalSpent: 0,
        orderCount: 0,
        averageOrderValue: 0,
        tags: [],
        marketingOptIn: false,
        loyaltyPoints: 0,
        tier: 'bronze',
        source: 'website',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },

    ecommerce_coupons: {
      required: ['websiteId', 'code', 'discountType'],
      types: {
        websiteId: 'string',
        code: 'string',
        name: 'string',
        description: 'string',
        discountType: 'string',
        discountValue: 'number',
        minimumAmount: 'number',
        maximumUses: 'number',
        usedCount: 'number',
        validFrom: 'date',
        validUntil: 'date',
        applicableProducts: 'array',
        applicableCategories: 'array',
        customerRestrictions: 'array',
        status: 'string',
        stackable: 'boolean',
        firstTimeOnly: 'boolean',
        createdAt: 'date',
      },
      defaults: {
        discountType: 'percentage',
        discountValue: 0,
        minimumAmount: 0,
        maximumUses: 0,
        usedCount: 0,
        validFrom: new Date().toISOString(),
        applicableProducts: [],
        applicableCategories: [],
        customerRestrictions: [],
        status: 'active',
        stackable: false,
        firstTimeOnly: false,
        createdAt: new Date().toISOString(),
      },
    },

    ecommerce_inventory: {
      required: ['websiteId', 'productId'],
      types: {
        websiteId: 'string',
        productId: 'string',
        sku: 'string',
        barcode: 'string',
        quantity: 'number',
        reserved: 'number',
        available: 'number',
        reorderPoint: 'number',
        reorderQuantity: 'number',
        cost: 'number',
        supplier: 'string',
        location: 'string',
        lastRestocked: 'date',
        trackingEnabled: 'boolean',
        allowBackorder: 'boolean',
        lowStockAlerts: 'boolean',
        notes: 'string',
        history: 'array',
        updatedAt: 'date',
      },
      defaults: {
        quantity: 0,
        reserved: 0,
        available: 0,
        reorderPoint: 5,
        reorderQuantity: 10,
        cost: 0,
        trackingEnabled: true,
        allowBackorder: false,
        lowStockAlerts: true,
        history: [],
        updatedAt: new Date().toISOString(),
      },
    },

    ecommerce_reviews: {
      required: ['websiteId', 'productId', 'rating'],
      types: {
        websiteId: 'string',
        productId: 'string',
        customerId: 'string',
        customerName: 'string',
        customerEmail: 'string',
        rating: 'number',
        title: 'string',
        comment: 'string',
        verified: 'boolean',
        helpful: 'number',
        notHelpful: 'number',
        status: 'string',
        response: 'string',
        responseDate: 'date',
        images: 'array',
        createdAt: 'date',
        updatedAt: 'date',
      },
      defaults: {
        rating: 5,
        verified: false,
        helpful: 0,
        notHelpful: 0,
        status: 'pending',
        images: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },

    ecommerce_abandoned_carts: {
      required: ['websiteId', 'sessionId'],
      types: {
        websiteId: 'string',
        sessionId: 'string',
        customerId: 'string',
        customerEmail: 'string',
        items: 'array',
        total: 'number',
        currency: 'string',
        lastActivity: 'date',
        recovered: 'boolean',
        recoveryEmailsSent: 'number',
        source: 'string',
        deviceInfo: 'object',
        exitPage: 'string',
        createdAt: 'date',
        expiresAt: 'date',
      },
      defaults: {
        total: 0,
        currency: 'USD',
        recovered: false,
        recoveryEmailsSent: 0,
        source: 'website',
        deviceInfo: {},
        lastActivity: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days
      },
    },

    // ... keep all other existing schemas (careers, job_applications, press_releases, etc.)
    careers: {
      required: ['title', 'department', 'description'],
      types: {
        title: 'string',
        department: 'string',
        description: 'string',
        requirements: 'array',
        responsibilities: 'array',
        location: 'string',
        type: 'string',
        level: 'string',
        salary: 'object',
        benefits: 'array',
        status: 'string',
        applications: 'array',
        postedAt: 'date',
        closingDate: 'date',
        featured: 'boolean',
      },
      defaults: {
        requirements: [],
        responsibilities: [],
        type: 'full-time',
        level: 'mid',
        salary: { min: 0, max: 0, currency: 'USD' },
        benefits: [],
        status: 'active',
        applications: [],
        postedAt: new Date().toISOString(),
        featured: false,
      },
    },

    job_applications: {
      required: ['jobId', 'applicantName', 'applicantEmail'],
      types: {
        jobId: 'string',
        applicantName: 'string',
        applicantEmail: 'string',
        applicantPhone: 'string',
        resume: 'string',
        coverLetter: 'string',
        portfolio: 'string',
        linkedIn: 'string',
        status: 'string',
        notes: 'array',
        interviews: 'array',
        appliedAt: 'date',
        source: 'string',
      },
      defaults: {
        status: 'pending',
        notes: [],
        interviews: [],
        appliedAt: new Date().toISOString(),
        source: 'website',
      },
    },

    press_releases: {
      required: ['title', 'content'],
      types: {
        title: 'string',
        content: 'string',
        summary: 'string',
        mediaContacts: 'array',
        images: 'array',
        downloads: 'array',
        publishedAt: 'date',
        status: 'string',
        tags: 'array',
        category: 'string',
      },
      defaults: {
        mediaContacts: [],
        images: [],
        downloads: [],
        publishedAt: new Date().toISOString(),
        status: 'draft',
        tags: [],
        category: 'general',
      },
    },

    media_assets: {
      required: ['name', 'type', 'url'],
      types: {
        name: 'string',
        type: 'string',
        url: 'string',
        description: 'string',
        category: 'string',
        fileSize: 'number',
        dimensions: 'object',
        format: 'string',
        tags: 'array',
        downloadCount: 'number',
        uploadedAt: 'date',
      },
      defaults: {
        category: 'general',
        fileSize: 0,
        dimensions: { width: 0, height: 0 },
        tags: [],
        downloadCount: 0,
        uploadedAt: new Date().toISOString(),
      },
    },

    documentation: {
      required: ['title', 'content', 'category'],
      types: {
        title: 'string',
        content: 'string',
        category: 'string',
        slug: 'string',
        order: 'number',
        tags: 'array',
        lastUpdated: 'date',
        author: 'string',
        version: 'string',
        status: 'string',
        searchKeywords: 'array',
        relatedDocs: 'array',
      },
      defaults: {
        order: 0,
        tags: [],
        lastUpdated: new Date().toISOString(),
        version: '1.0',
        status: 'published',
        searchKeywords: [],
        relatedDocs: [],
      },
    },

    help_articles: {
      required: ['title', 'content', 'category'],
      types: {
        title: 'string',
        content: 'string',
        category: 'string',
        subcategory: 'string',
        difficulty: 'string',
        estimatedReadTime: 'number',
        helpful: 'number',
        notHelpful: 'number',
        views: 'number',
        tags: 'array',
        relatedArticles: 'array',
        lastUpdated: 'date',
        status: 'string',
      },
      defaults: {
        difficulty: 'beginner',
        estimatedReadTime: 5,
        helpful: 0,
        notHelpful: 0,
        views: 0,
        tags: [],
        relatedArticles: [],
        lastUpdated: new Date().toISOString(),
        status: 'published',
      },
    },

    community_posts: {
      required: ['title', 'content', 'author'],
      types: {
        title: 'string',
        content: 'string',
        author: 'string',
        category: 'string',
        tags: 'array',
        upvotes: 'number',
        downvotes: 'number',
        replies: 'array',
        solved: 'boolean',
        featured: 'boolean',
        status: 'string',
        createdAt: 'date',
        lastActivity: 'date',
        views: 'number',
      },
      defaults: {
        upvotes: 0,
        downvotes: 0,
        replies: [],
        solved: false,
        featured: false,
        status: 'published',
        createdAt: new Date().toISOString(),
        lastActivity: new Date().toISOString(),
        views: 0,
      },
    },

    changelog_entries: {
      required: ['version', 'title', 'changes'],
      types: {
        version: 'string',
        title: 'string',
        changes: 'array',
        type: 'string',
        releaseDate: 'date',
        status: 'string',
        highlights: 'array',
        breakingChanges: 'array',
        deprecations: 'array',
        bugFixes: 'array',
        improvements: 'array',
        newFeatures: 'array',
      },
      defaults: {
        type: 'minor',
        releaseDate: new Date().toISOString(),
        status: 'released',
        highlights: [],
        breakingChanges: [],
        deprecations: [],
        bugFixes: [],
        improvements: [],
        newFeatures: [],
      },
    },

    system_status: {
      required: ['component', 'status'],
      types: {
        component: 'string',
        status: 'string',
        description: 'string',
        lastChecked: 'date',
        uptime: 'number',
        responseTime: 'number',
        incidents: 'array',
        maintenance: 'array',
      },
      defaults: {
        status: 'operational',
        lastChecked: new Date().toISOString(),
        uptime: 99.9,
        responseTime: 100,
        incidents: [],
        maintenance: [],
      },
    },

    api_keys: {
      required: ['userId', 'keyName'],
      types: {
        userId: 'string',
        keyName: 'string',
        keyHash: 'string',
        permissions: 'array',
        rateLimit: 'object',
        lastUsed: 'date',
        usage: 'object',
        status: 'string',
        expiresAt: 'date',
        createdAt: 'date',
        ipWhitelist: 'array',
      },
      defaults: {
        permissions: ['read'],
        rateLimit: { requests: 1000, window: 3600 },
        usage: { requests: 0, lastReset: new Date().toISOString() },
        status: 'active',
        createdAt: new Date().toISOString(),
        ipWhitelist: [],
      },
    },

    chat_conversations: {
      required: ['userId', 'messages'],
      types: {
        userId: 'string',
        sessionId: 'string',
        messages: 'array',
        status: 'string',
        startedAt: 'date',
        endedAt: 'date',
        satisfaction: 'number',
        resolved: 'boolean',
        tags: 'array',
        agent: 'string',
      },
      defaults: {
        status: 'active',
        startedAt: new Date().toISOString(),
        resolved: false,
        tags: [],
        agent: 'ai-assistant',
      },
    },
  },
};

export default enhancedSDKConfig;
